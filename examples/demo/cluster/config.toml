# ServiceDiscovery
# Whether service as cluster
pitaya.cluster.enabled = false
# Role type of cluster server node
# pitaya.cluster.node.type = "connector"
pitaya.cluster.node.type = "room"
# Dial timeout value passed to the service discovery etcd client
pitaya.cluster.sd.etcd.dialtimeout = 5000000000
# List of comma separated etcd endpoints
pitaya.cluster.sd.etcd.endpoints = "127.0.0.1:2379"
# Username to connect to etcd
pitaya.cluster.sd.etcd.user = ""
# Password to connect to etcd
pitaya.cluster.sd.etcd.pass = ""
# Hearbeat interval for the etcd lease
pitaya.cluster.sd.etcd.heartbeat.ttl = 60000000000
# Timeout for etcd lease
pitaya.cluster.sd.etcd.grantlease.timeout = 60000000000
# Maximum number of attempts to etcd grant lease
pitaya.cluster.sd.etcd.grantlease.maxretries = 15000000000
# Interval between each grant lease attempt
pitaya.cluster.sd.etcd.grantlease.retryinterval = 5000000000
# Timeout for etcdâ€™s revoke function
pitaya.cluster.sd.etcd.revoke.timeout = 5000000000
# Whether etcd heartbeats should be logged in debug mode
pitaya.cluster.sd.etcd.heartbeat.log = false
# Prefix used to avoid collisions with different pitaya applications, servers must have the same prefix to be able to see each other
pitaya.cluster.sd.etcd.prefix = "pitaya/"
# Interval between server syncs performed by the service discovery module
pitaya.cluster.sd.etcd.syncservers.interval = 120000000000
# Time to wait to shutdown after deregistering from service discovery
pitaya.cluster.sd.etcd.shutdown.delay = 10000000
# A list of server types that should be ignored by the service discovery
pitaya.cluster.sd.etcd.servertypeblacklist = []
# The number of goroutines that should be used while getting server information on etcd initialization
pitaya.cluster.sd.etcd.syncservers.parallelism = 10

# RPCService
# Size of the buffer that for the nats RPC server accepts before starting to drop incoming messages
pitaya.cluster.rpc.server.nats.buffer.messages = 75
# Size of the buffer that the nats RPC server creates for push messages
pitaya.cluster.rpc.server.nats.buffer.push = 100
# Timeout for the gRPC client to establish the connection
pitaya.cluster.rpc.client.grpc.dialtimeout = 5000000000
# Whether the gRPC client should use a lazy connection, that is, connect only when a request is made to that server
pitaya.cluster.rpc.client.grpc.lazyconnection = false
# Request timeout for RPC calls with the gRPC client
pitaya.cluster.rpc.client.grpc.requesttimeout = 5000000000
# Nats address for the client
pitaya.cluster.rpc.client.nats.connect = "nats://127.0.0.1:4222"
# Timeout for the nats client to establish the connection
pitaya.cluster.rpc.client.nats.connectiontimeout = 5000000000
# Request timeout for RPC calls with the nats client
pitaya.cluster.rpc.client.nats.requesttimeout = 5000000000
# Maximum number of retries to reconnect to nats for the client
pitaya.cluster.rpc.client.nats.maxreconnectionretries = 15000000000
# Nats address for the server
pitaya.cluster.rpc.server.nats.connect = "nats://127.0.0.1:4222"
# Timeout for the nats server to establish the connection
pitaya.cluster.rpc.server.nats.connectiontimeout = 5000000000
# Maximum number of retries to reconnect to nats for the server
pitaya.cluster.rpc.server.nats.maxreconnectionretries = 15000000000
# The port that the gRPC server listens to
pitaya.cluster.rpc.server.grpc.port = 3434
# Number of goroutines processing messages at the remote service for the nats RPC service
pitaya.cluster.rpc.server.nats.services = 30
# Redis url pitaya workers use to register jobs
pitaya.worker.redis.url = "localhost:6379"
# Number of connections to keep with Redis
pitaya.worker.redis.pool = 10
# Redis password to connect to pitaya workers redis
pitaya.worker.redis.password = ""
# Number of workers to execute job
pitaya.worker.concurrency = 1
# Worker namespace, can be used to differ stacks in a blue-green deployment
pitaya.worker.namespace = ""
# If true, retry job if errored for max times
pitaya.worker.retry.enabled = true
# Max number of job retries
pitaya.worker.retry.max = 5
# Retry job after backoff of nRetry**2
pitaya.worker.retry.exponential = 2
# Min time to wait on backoff to retry job
pitaya.worker.retry.minDelay = 0
# Max time to wait on backoff to retry job
pitaya.worker.retry.maxDelay = 10
# Random time to wait during backoff
pitaya.worker.retry.maxRandom = 10

# Connection
# Whether messages between client and server should be compressed
pitaya.handler.messages.compression = false
# Keepalive heartbeat interval for the client connection
pitaya.heartbeat.interval = 30000000000
# Window of time to count requests
pitaya.conn.ratelimiting.interval = 1000000000
# Max number of requests allowed in a interval
pitaya.conn.ratelimiting.limit = 20
# If true, ignores rate limiting even when added with WithWrappers
pitaya.conn.ratelimiting.forcedisable = false
# Network listening
pitaya.conn.listens = [
    { scheme = "ws", port = 3250},
    { scheme = "tcp", port = 4000}
]
# MetricsReporting
# Whether statsd reporting should be enabled
pitaya.metrics.statsd.enabled = false
# Address of the statsd server to send the metrics to
pitaya.metrics.statsd.host = "localhost:9125"
# Prefix of the metrics reported to statsd
pitaya.metrics.statsd.prefix = "pitaya."
# Statsd metrics rate
pitaya.metrics.statsd.rate = 1
# Whether prometheus reporting should be enabled
pitaya.metrics.prometheus.enabled = false
# Port to expose prometheus metrics
pitaya.metrics.prometheus.port = 9090
# Constant tags to be added to reported metrics
pitaya.metrics.constTags = {}
# Additional tags to reported metrics, the map is from tag to default value
pitaya.metrics.prometheus.additionalTags = {}
# Period that system metrics will be reported
pitaya.metrics.period = 15000000000
# Custom metrics counter
pitaya.metrics.custom.counters = []
# Custom metrics gauge
pitaya.metrics.custom.gauges = []
# Custom metrics summary
pitaya.metrics.custom.summaries = []

# Concurrency
# Buffer size for received client messages for each agent
pitaya.buffer.agent.messages = 100
# Buffer size for messages received by the handler and processed locally
pitaya.buffer.handler.localprocess = 20
# Buffer size for messages received by the handler and forwarded to remote servers
pitaya.buffer.handler.remoteprocess = 20
# Number of goroutines processing messages at the handler service
pitaya.concurrency.handler.dispatch = 25

# Modules
# Whether Pitaya should enforce unique sessions for the clients, enabling the unique sessions module
pitaya.session.unique = true
# Comma separated list of etcd endpoints to be used by the binding storage module, should be the same as the service discovery etcd
pitaya.modules.bindingstorage.etcd.endpoints = "127.0.0.1:2379"
# Prefix used for etcd, should be the same as the service discovery
pitaya.modules.bindingstorage.etcd.prefix = "pitaya/"
# Timeout to establish the etcd connection
pitaya.modules.bindingstorage.etcd.dialtimeout = 5000000000
# Duration of the etcd lease before automatic renewal
pitaya.modules.bindingstorage.etcd.leasettl = 3600000000000

# DefaultPipelines
# Whether Pitaya should enable the default struct validator for handler arguments
pitaya.defaultpipelines.structvalidation.enabled = false

# Groups
# Comma separated list of etcd endpoints to be used by the groups etcd service
pitaya.groups.etcd.endpoints = "127.0.0.1:2379"
# Prefix used for every group key in etcd
pitaya.groups.etcd.prefix = "pitaya/"
# Timeout to establish the etcd group connection
pitaya.groups.etcd.dialtimeout = 5000000000
# Timeout to finish group request to Etcd
pitaya.groups.etcd.transactiontimeout = 5000000000
# Duration time of tick that will check if should delete group or not
pitaya.groups.memory.tickduration = 30000000000

# Chat Room
app.chat.web.port=8091
